import java.time.Year;
import java.util.Calendar;
import java.util.HashMap;
import java.util.concurrent.atomic.AtomicInteger;

public class Exploiter {
    Exploite exploite;
    AtomicInteger idE;
    HashMap <Integer, Exploite> exploiteHashMap = new HashMap<>();
    Calendar cal = Calendar.getInstance();
    int year = cal.get(Calendar.YEAR);


    public Exploite getExploite() {
        return exploite;
    }

    public AtomicInteger getIdE() {
        return idE;
    }

    public HashMap<Integer, Exploite> getExploiteHashMap() {
        return exploiteHashMap;
    }


    public void setExploite(Exploite exploite) {
        this.exploite = exploite;
    }

    public void setExploiteHashMap(HashMap<Integer, Exploite> exploiteHashMap) {
        this.exploiteHashMap = exploiteHashMap;
    }

    public Calendar getCal() {
        return cal;
    }

    public int getYear() {
        return year;
    }

    public void setIdE(AtomicInteger idE) {
        this.idE = idE;
    }

    public void setCal(Calendar cal) {
        this.cal = cal;
    }

    public void setYear(int year) {
        this.year = year;
    }

    public void addExploiter(Exploite e){

        try{
            exploiteHashMap.put(idE.getAndIncrement(), e);
        }catch (Exception ex){
            System.out.println("Could not add this element : "+ex.getMessage());
        }
    }

    public void removeExploitant(Exploite e, Account c){

        if(c.getRoles().contains(new Role(roleP.agentAd)) || c.getRoles().contains(new Role(roleP.maintainAd))){
            try{
                if(exploiteHashMap != null){
                    for (var entry: exploiteHashMap.entrySet()) {
                        if(entry.getValue() == e){
                            exploiteHashMap.remove(entry.getKey());
                        }
                    }
                }
            }catch (Exception ex){
                System.out.println("Could not remove this element :"+ex.getMessage());
            }
        }else {
            System.out.println("Vous ne pouvez effctuer cette action.");
        }

    }

    public void removeExploitant(Account c){

        if (c.getRoles().contains(new Role(roleP.agentAd)) || c.getRoles().contains(new Role(roleP.maintainAd))){
            try{
                if(exploiteHashMap != null){
                    for (var entry: exploiteHashMap.entrySet()) {
                        int y = entry.getValue().getDateFinExploit().get(Calendar.YEAR);
                        if(y < year){
                            exploiteHashMap.remove(entry.getKey());
                        }
                    }
                }
            }catch (Exception ex){
                System.out.println("Something went wrong :"+ex.getMessage());
            }
        }
    }
}
