import java.time.Year;
import java.util.HashMap;
import java.util.concurrent.atomic.AtomicInteger;

public class Exploiter {
    Exploite exploite;
    AtomicInteger idE;
    HashMap <Integer, Exploite> exploiteHashMap = new HashMap<>();
    Year year = Year.now();

    public Exploite getExploite() {
        return exploite;
    }

    public AtomicInteger getIdE() {
        return idE;
    }

    public HashMap<Integer, Exploite> getExploiteHashMap() {
        return exploiteHashMap;
    }

    public Year getYear() {
        return year;
    }

    public void setExploite(Exploite exploite) {
        this.exploite = exploite;
    }

    public void setExploiteHashMap(HashMap<Integer, Exploite> exploiteHashMap) {
        this.exploiteHashMap = exploiteHashMap;
    }

    public void setYear(Year year) {
        this.year = year;
    }

    public void addExploiter(Exploite e){

        try{
            exploiteHashMap.put(idE.getAndIncrement(), e);
        }catch (Exception ex){
            System.out.println("Could not add this element : "+ex.getMessage());
        }
    }

    public void removeExploitant(Exploite e){

        try{
            if(exploiteHashMap != null){
                for (var entry: exploiteHashMap.entrySet()) {
                    if(entry.getValue() == e){
                        exploiteHashMap.remove(entry.getKey());
                    }
                }
            }
        }catch (Exception ex){
            System.out.println("Could not remove this element :"+ex.getMessage());
        }
    }

    public void removeExploitant(){

        try{
            if(exploiteHashMap != null){
                for (var entry: exploiteHashMap.entrySet()) {
                    int y = entry.getValue().getDateDebExploit().getYear();
                    if(this.year.equals(y)){
                        exploiteHashMap.remove(entry.getKey());
                    }
                }
            }
        }catch (Exception ex){
            System.out.println("Something went wrong :"+ex.getMessage());
        }
    }
}
